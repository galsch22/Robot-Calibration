# -*- coding: utf-8 -*-
import pandas as pd
import csv
from collections import defaultdict
import matplotlib.pyplot as plt
from numpy import array
import numpy as np


def nested_dict():
    return defaultdict(nested_dict)


def read_lines():
    with open('empty-columns-removed.csv', 'rU') as data:
        reader = csv.reader(data)
        for row in reader:
            yield [float(i) for i in row]


# קליטת מסמך CSV, מחיקת העמודות הריקות וקליטה של הנתונים הנותרים במסמך חדש.
def importCSV(FileName, skipRows=True):
    if skipRows:
        csv_files = pd.read_csv(
            FileName, header=[0, 1, 2, 3], low_memory=False, skiprows=[0, 1, 4])
    else:
        csv_files = pd.read_csv(FileName, dtype='unicode',
                                low_memory=False, header=[2, 3, 4, 5])
    firstNotEmptyIndex = csv_files.loc[csv_files["Marker"]
                                       ["Rigid Body 1:Marker5"]["Position"]["X"].isna() == False].index[0]
    csv_files.drop(csv_files.index[0:firstNotEmptyIndex],
                   inplace=True)
    del_data = csv_files.dropna(axis='columns', thresh=200)
    del_data.apply(pd.to_numeric, errors="ignore", downcast="float")
    del_data.to_csv('empty-columns-removed.csv', index=False)
    with open('empty-columns-removed.csv', newline='') as f:
        data = nested_dict()
        data.keys()

        fileData = csv.reader(f, delimiter=",")

        typecsv = next(fileData)
        typecsv = ["".join(x for x in o if x.isalpha()) for o in typecsv]
        dataType = next(fileData)
        subCatagory = next(fileData)
        subsubCatagory = next(fileData)

        for i in range(len(dataType)):
            data[typecsv[i]][dataType[i]][subCatagory[i]][subsubCatagory[i]] = []

        for row in fileData:
            for i in range(len(dataType)):
                data[typecsv[i]][dataType[i]][subCatagory[i]][subsubCatagory[i]].append(row[i])

        return data


# def double(lst):
#     return [i * 1000 for i in lst]


def plot_xyz_Marker(data, value, category, time):

    plt.figure(value)
    plt.style.use('seaborn')
    plt.style.use('classic')
    fig1 = array(data[category][value]['Position']['X'])
    figp1 = (nan_helper(fig1))
    fig2 = array(data[category][value]['Position']['Y'])
    figp2 = (nan_helper(fig2))
    fig3 = array(data[category][value]['Position']['Z'])
    figp3 = (nan_helper(fig3))

    plt.title(value)

    def millimeter(x, pos):
        """The two args are the value and tick position."""
        return '{:1.1f}'.format(x * 1e3)

    ax = plt.subplot(3, 1, 1)  # two rows, one column, first plot
    plt.xlabel('Time (sec)')  # returns a Text instance
    plt.ylabel('Position (mm)')
    ax.plot(time, figp1, 'b')
    ax.yaxis.set_major_formatter(millimeter)
    plt.title("X")

    ax1 = plt.subplot(3, 1, 2)  # two rows, one column, first plot
    plt.xlabel('Time (sec)')  # returns a Text instance
    plt.ylabel('Position (mm)')
    ax1.plot(time, figp2, 'r')
    ax1.yaxis.set_major_formatter(millimeter)
    plt.title("Y")

    ax2 = plt.subplot(3, 1, 3)  # two rows, one column, first plot
    plt.xlabel('Time (sec)')  # returns a Text instance
    plt.ylabel('Position (mm)')
    ax2.plot(time, figp3, 'g')
    ax2.yaxis.set_major_formatter(millimeter)
    plt.title("Z")
    plt.tight_layout()
    plt.show(block=False)


def nan_helper(y):
    # Helper to handle indices and logical indices of NaNs.
    y[y == ""] = np.nan
    s = pd.Series(y)

    return s.interpolate().astype("float64")
