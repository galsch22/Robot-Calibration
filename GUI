from os import getcwd
from os import listdir
from tkinter import *
from tkinter import filedialog, messagebox
from fix_times import *
from angle import *
from bag_to_csv import *
from import_CSV import *

data_csv = {}
data_bag = {}
data_cmd = {}
data_val = {}
angleList = {}
fig_val = {}
time_cmd = []
time_val = []
time_csv = []


# -----------------------------------------------------------------------------Function-----------------------------------------------------------------#
# CSV button
def open_csv():
    global time_csv, time_val, data_val, data_csv
    file_csv = filedialog.askopenfilename(initialdir=getcwd(), title="Select file",
                                          filetypes=(("csv files", "*.csv"), ("all files", "*.*")))
    pathlabelcsv.configure(text=os.path.basename(file_csv))
    data_csv = importCSV(file_csv)
    data_csv["type"] = "csv"
    time_csv = nested_lookup(key="Time", document=data_csv, wild=True)[0]
    time_csv = [float(x) for x in time_csv]
    time_csv = time(time_csv)
    if len(time_csv) != len(time_val) and len(time_val) > 0:
        time_val, data_val = fixing(time_csv, time_val, data_val)


# BAG button
def open_bag():
    global data_bag, data_cmd, data_val, time_cmd, time_val, data_csv
    file = filedialog.askopenfilename(initialdir=getcwd(), title="Select file",
                                      filetypes=(("bag files", "*.bag"), ("all files", "*.*")))

    pathlabelbag.configure(text=os.path.basename(file))
    data_bag["type"] = "bag"
    folder = bag2csv(file)
    for file in listdir(folder):
        if file.endswith('.csv'):
            data_bag[file.replace(".csv", "")] = pd.read_csv(f"{folder}/{file}", dtype='unicode', header=0, low_memory=False)
    cmd = data_bag["joint_cmd"]
    val = data_bag["joint_val"]
    time_cmd = convertDataStringToListData(cmd['time'])
    time_cmd = time(time_cmd)
    time_val = convertDataStringToListData(val['time'])
    time_val = time(time_val)
    data_cmd = convertDataStringToListData(cmd['.data'])
    data_val = convertDataStringToListData(val['.data'])
    time_cmd = time_sec(time_cmd)
    time_val = time_sec(time_val)
    if len(time_csv) != len(time_val) and len(time_csv) > 0:
        time_val, data_val = fixing(time_csv, time_val, data_val)


# convert the time to sec
def time(Time):
    start_time = Time[0]
    len_time = len(Time)
    end_time = Time[len_time - 1]
    duration_time = end_time - start_time
    final_time = np.linspace(float(0), duration_time, len_time, endpoint=False)
    return final_time


def btnexit():
    MsgBox = messagebox.askquestion('Exit Application', 'Are you sure you want to exit the application',
                                    icon='warning')
    if MsgBox == 'yes':
        listBox.delete(0, END)
        top.destroy()
    else:
        messagebox.showinfo('Return', 'You will now return to the application screen')


def graph_marker():
    if not data_csv:
        messagebox.showwarning('Warning', 'No CSV File', icon='warning')

    else:
        if listBox != 0:
            listBox.delete(0, END)
        keys = data_csv['Marker'].keys()
        for i, key in enumerate(keys):
            if 'Rigid Body' in key:
                listBox.insert(i, key)
        listBox.bind("<Double-Button-1>", OnDouble_marker)


def OnDouble_marker(event):
    widget = event.widget
    selection = widget.curselection()
    value = widget.get(selection[0])
    plot_xyz_Marker(data_csv, value, "Marker", time_csv)


def func_val_cmd():
    if not data_bag:
        if not data_bag:
            messagebox.showwarning('Warning', 'No BAG File', icon='warning')
    else:
        if listBox != 0:
            listBox.delete(0, END)
        keys = ['Joint 1', 'Joint 2', 'Joint 3', 'Joint 4']
        for i, key in enumerate(keys):
            listBox.insert(i, key)
        listBox.bind("<Double-Button-1>", OnDouble_val_cmd)


def OnDouble_val_cmd(event):
    widget = event.widget
    selection = widget.curselection()
    value = widget.get(selection[0])
    graph_bag_val_cmd(data_cmd, data_val, time_val, time_cmd, selection[0], value)


def func_tension():
    if not data_bag:
        if not data_bag:
            messagebox.showwarning('Warning', 'No BAG File', icon='warning')
    else:
        if listBox != 0:
            listBox.delete(0, END)
        keys = ['Joint 1', 'Joint 2', 'Joint 3', 'Joint 4']
        for i, key in enumerate(keys):
            listBox.insert(i, key)
        listBox.bind("<Double-Button-1>", OnDouble_tension)


def OnDouble_tension(event):
    widget = event.widget
    selection = widget.curselection()
    value = widget.get(selection[0])
    tension_graph(data_bag, selection[0], value)


def func_motor():
    if not data_bag:
        messagebox.showwarning('Warning', 'No BAG File', icon='warning')
    else:
        if listBox != 0:
            listBox.delete(0, END)
        keys = ['Joint 1', 'Joint 2', 'Joint 3', 'Joint 4']
        for i, key in enumerate(keys):
            listBox.insert(i, key)
        listBox.bind("<Double-Button-1>", OnDouble_motor)


def OnDouble_motor(event):
    widget = event.widget
    selection = widget.curselection()
    value = widget.get(selection[0])
    motor_graph(data_bag, selection[0], value)


def func_angle():
    global angleList, fig_val
    if not data_csv or not data_bag:
        if not data_csv:
            messagebox.showwarning('Warning', 'No CSV File', icon='warning')
        if not data_bag:
            messagebox.showwarning('Warning', 'No BAG File', icon='warning')
    else:
        if listBox != 0:
            listBox.delete(0, END)
        keys = ['joint 1', 'joint 2', 'joint 3', 'joint 4']
        for i, key in enumerate(keys):
            listBox.insert(i, key)
        listBox.bind("<Double-Button-1>", OnDouble_angle)


def OnDouble_angle(event):
    widget = event.widget
    selection = widget.curselection()
    keys_rigid = ['Rigid Body 1', 'Rigid Body 2', 'Rigid Body 3', 'Rigid Body 4', 'Rigid Body 5']
    value = widget.get(selection[0])
    angle_graph(data_csv, keys_rigid[selection[0]], keys_rigid[selection[0] + 1], data_cmd, data_val, selection[0],
                time_cmd, time_val, time_csv, value)


def func_error():
    if not data_csv or not data_bag:
        if not data_csv:
            messagebox.showwarning('Warning', 'No CSV File', icon='warning')
        if not data_bag:
            messagebox.showwarning('Warning', 'No BAG File', icon='warning')
    else:
        if listBox != 0:
            listBox.delete(0, END)
        keys = ['joint 1', 'joint 2', 'joint 3', 'joint 4']
        for i, key in enumerate(keys):
            listBox.insert(i, key)
        listBox.bind("<Double-Button-1>", OnDouble_error)


def OnDouble_error(event):
    widget = event.widget
    selection = widget.curselection()
    keys_rigid = ['Rigid Body 1', 'Rigid Body 2', 'Rigid Body 3', 'Rigid Body 4', 'Rigid Body 5']
    value = widget.get(selection[0])
    error(data_csv, keys_rigid[selection[0]], keys_rigid[selection[0] + 1], data_cmd, data_val, selection[0],
          time_cmd, time_val, time_csv, value)


def func_histogram():
    if not data_csv or not data_bag:
        if not data_csv:
            messagebox.showwarning('Warning', 'No CSV File', icon='warning')
        if not data_bag:
            messagebox.showwarning('Warning', 'No BAG File', icon='warning')
    else:
        if listBox != 0:
            listBox.delete(0, END)
        keys = ['joint 1', 'joint 2', 'joint 3', 'joint 4']
        for i, key in enumerate(keys):
            listBox.insert(i, key)
        listBox.bind("<Double-Button-1>", OnDouble_histogram)


def OnDouble_histogram(event):
    widget = event.widget
    selection = widget.curselection()
    keys_rigid = ['Rigid Body 1', 'Rigid Body 2', 'Rigid Body 3', 'Rigid Body 4', 'Rigid Body 5']
    value = widget.get(selection[0])
    histogram(data_csv, keys_rigid[selection[0]], keys_rigid[selection[0] + 1], data_cmd, data_val, selection[0], time_cmd, time_val, time_csv, value)


# -------------------------------------------------------MainLoop---------------------------------------------------------------------------------#
top = Tk()
top.geometry("566x506")
top.minsize(120, 1)
top.maxsize(1370, 749)
top.resizable(0, 0)
top.title("Robot Calibration")
top.configure(background="#d9d9d9")

browsecsv = Button(top)
browsecsv.place(relx=0.520, rely=0.042, height=24, width=67)
browsecsv.configure(activebackground="#ececec")
browsecsv.configure(activeforeground="#000000")
browsecsv.configure(background="#d9d9d9")
browsecsv.configure(disabledforeground="#a3a3a3")
browsecsv.configure(foreground="#000000")
browsecsv.configure(highlightbackground="#d9d9d9")
browsecsv.configure(highlightcolor="black")
browsecsv.configure(pady="0")
browsecsv.configure(text='''Browse''')
browsecsv.configure(command=open_csv)

browsebag = Button(top)
browsebag.place(relx=0.520, rely=0.142, height=24, width=67)
browsebag.configure(activebackground="#ececec")
browsebag.configure(activeforeground="#000000")
browsebag.configure(background="#d9d9d9")
browsebag.configure(cursor="arrow")
browsebag.configure(disabledforeground="#a3a3a3")
browsebag.configure(foreground="#000000")
browsebag.configure(highlightbackground="#d9d9d9")
browsebag.configure(highlightcolor="black")
browsebag.configure(pady="0")
browsebag.configure(text='''Browse''')
browsebag.configure(command=open_bag)

csvfile = Label(top)
csvfile.place(relx=0.014, rely=0.018, height=38, width=90)
csvfile.configure(background="#d9d9d9")
csvfile.configure(disabledforeground="#a3a3a3")
csvfile.configure(font="-family {Calibri} -size 12 -weight bold")
csvfile.configure(foreground="#000000")
csvfile.configure(text='''CSV File''')

bagfile = Label(top)
bagfile.place(relx=0.014, rely=0.126, height=51, width=90)
bagfile.configure(background="#d9d9d9")
bagfile.configure(cursor="fleur")
bagfile.configure(disabledforeground="#a3a3a3")
bagfile.configure(font="-family {Calibri} -size 12 -weight bold")
bagfile.configure(foreground="#000000")
bagfile.configure(text='''BAG File''')

pathlabelcsv = Label(top)
pathlabelcsv.place(relx=0.159, rely=0.042, height=22, width=200)
pathlabelcsv.configure(background="white")
pathlabelcsv.configure(disabledforeground="#a3a3a3")
pathlabelcsv.configure(foreground="black")
pathlabelcsv.configure(highlightbackground="#d9d9d9")
pathlabelcsv.configure(highlightcolor="black")

pathlabelbag = Label(top)
pathlabelbag.place(relx=0.159, rely=0.144, height=22, width=200)
pathlabelbag.configure(background="white")
pathlabelbag.configure(disabledforeground="#a3a3a3")
pathlabelbag.configure(foreground="black")
pathlabelbag.configure(highlightbackground="#d9d9d9")
pathlabelbag.configure(highlightcolor="black")

marker_position = Button(top)
marker_position.place(relx=0.071, rely=0.348, height=34, width=107)
marker_position.configure(activebackground="#ececec")
marker_position.configure(activeforeground="#000000")
marker_position.configure(background="#d9d9d9")
marker_position.configure(disabledforeground="#a3a3a3")
marker_position.configure(foreground="#000000")
marker_position.configure(highlightbackground="#d9d9d9")
marker_position.configure(highlightcolor="black")
marker_position.configure(pady="0")
marker_position.configure(text='''Marker Position''')
marker_position.configure(command=graph_marker)

listBox = Listbox(top)
listBox.place(relx=0.601, rely=0.573, relheight=0.32, relwidth=0.378)
listBox.configure(background="white")
listBox.configure(disabledforeground="#a3a3a3")
listBox.configure(font="TkFixedFont")
listBox.configure(foreground="#000000")
listBox.configure(highlightbackground="#d9d9d9")
listBox.configure(highlightcolor="black")
listBox.configure(selectbackground="blue")
listBox.configure(selectforeground="white")

motor_command = Button(top)
motor_command.place(relx=0.316, rely=0.348, height=34, width=117)
motor_command.configure(activebackground="#ececec")
motor_command.configure(activeforeground="#000000")
motor_command.configure(background="#d9d9d9")
motor_command.configure(disabledforeground="#a3a3a3")
motor_command.configure(foreground="#000000")
motor_command.configure(highlightbackground="#d9d9d9")
motor_command.configure(highlightcolor="black")
motor_command.configure(pady="0")
motor_command.configure(text='''Motor Command''')
motor_command.configure(command=func_motor)

tension = Button(top)
tension.place(relx=0.599, rely=0.348, height=34, width=77)
tension.configure(activebackground="#ececec")
tension.configure(activeforeground="#000000")
tension.configure(background="#d9d9d9")
tension.configure(disabledforeground="#a3a3a3")
tension.configure(foreground="#000000")
tension.configure(highlightbackground="#d9d9d9")
tension.configure(highlightcolor="black")
tension.configure(pady="0")
tension.configure(text='''Tension''')
tension.configure(command=func_tension)

joint_angle = Button(top)
joint_angle.place(relx=0.071, rely=0.472, height=34, width=107)
joint_angle.configure(activebackground="#ececec")
joint_angle.configure(activeforeground="#000000")
joint_angle.configure(background="#d9d9d9")
joint_angle.configure(disabledforeground="#a3a3a3")
joint_angle.configure(foreground="#000000")
joint_angle.configure(highlightbackground="#d9d9d9")
joint_angle.configure(highlightcolor="black")
joint_angle.configure(pady="0")
joint_angle.configure(text='''Joint Angles''')
joint_angle.configure(command=func_angle)

val_cmd = Button(top)
val_cmd.place(relx=0.316, rely=0.47, height=34, width=197)
val_cmd.configure(activebackground="#ececec")
val_cmd.configure(activeforeground="#000000")
val_cmd.configure(background="#d9d9d9")
val_cmd.configure(disabledforeground="#a3a3a3")
val_cmd.configure(foreground="#000000")
val_cmd.configure(highlightbackground="#d9d9d9")
val_cmd.configure(highlightcolor="black")
val_cmd.configure(pady="0")
val_cmd.configure(text='''Real Angle and Command Angle''')
val_cmd.configure(command=func_val_cmd)

error_per = Button(top)
error_per.place(relx=0.071, rely=0.597, height=34, width=127)
error_per.configure(activebackground="#ececec")
error_per.configure(activeforeground="#000000")
error_per.configure(background="#d9d9d9")
error_per.configure(disabledforeground="#a3a3a3")
error_per.configure(foreground="#000000")
error_per.configure(highlightbackground="#d9d9d9")
error_per.configure(highlightcolor="black")
error_per.configure(pady="0")
error_per.configure(text='''Error in Percentage''')
error_per.configure(command=func_error)

histogram_button = Button(top)
histogram_button.place(relx=0.353, rely=0.597, height=34, width=107)
histogram_button.configure(activebackground="#ececec")
histogram_button.configure(activeforeground="#000000")
histogram_button.configure(background="#d9d9d9")
histogram_button.configure(disabledforeground="#a3a3a3")
histogram_button.configure(foreground="#000000")
histogram_button.configure(highlightbackground="#d9d9d9")
histogram_button.configure(highlightcolor="black")
histogram_button.configure(pady="0")
histogram_button.configure(text='''Histogram''')
histogram_button.configure(command=func_histogram)

exit1 = Button(top)
exit1.place(relx=0.848, rely=0.905, height=34, width=77)
exit1.configure(activebackground="#ececec")
exit1.configure(activeforeground="#000000")
exit1.configure(background="#ff0000")
exit1.configure(disabledforeground="#a3a3a3")
exit1.configure(font="-family {Calibri} -size 16 -weight bold")
exit1.configure(foreground="#ffffff")
exit1.configure(highlightbackground="#d9d9d9")
exit1.configure(highlightcolor="black")
exit1.configure(pady="0")
exit1.configure(text='''EXIT''')
exit1.configure(command=btnexit)

top.mainloop()
