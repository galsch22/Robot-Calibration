import os
import matplotlib.pyplot as plt
from ast import literal_eval
import rosbag
import rospy
from collections import defaultdict
from datetime import datetime
import numpy as np


def time(Time):
    start_time = Time[0]
    len_time = len(Time)
    end_time = Time[len_time - 1]
    duration_time = end_time - start_time
    final_time = np.linspace(float(0), duration_time, len_time, endpoint=False)
    return final_time


def time_sec(time_old):
    time_in_sec = [i * 0.001 for i in time_old]
    return time_in_sec


def message_to_csv(stream, msg, flatten=False):
    """
    stream: StringIO
    msg: message
    """
    try:
        for s in type(msg).__slots__:
            val = msg.__getattribute__(s)
            message_to_csv(stream, val, flatten)
    except:
        msg_str = str(msg)
        if msg_str.find(",") != -1:
            if flatten:
                msg_str = msg_str.strip("(")
                msg_str = msg_str.strip(")")
                msg_str = msg_str.strip(" ")
            else:
                msg_str = "\"" + msg_str + "\""
        stream.write("," + msg_str)


def message_type_to_csv(stream, msg, parent_content_name=""):
    """
    stream: StringIO
    msg: message
    """
    try:
        for s in type(msg).__slots__:
            val = msg.__getattribute__(s)
            message_type_to_csv(stream, val, ".".join([parent_content_name, s]))
    except:
        stream.write("," + parent_content_name)


def format_csv_filename(folder_name, form, topic_name):
    if form is None:
        return "Convertedbag.csv"
    ret = form.replace('%t', topic_name.split('/')[-1])

    return f"{folder_name}/{ret}"


def GetTopicList(path):
    bag = rosbag.Bag(path)
    topics = bag.get_type_and_topic_info()[1].keys()
    types = []
    values = list(bag.get_type_and_topic_info()[1].values())
    for i in range(0, len(bag.get_type_and_topic_info()[1].values())):
        types.append(values[i][0])

    results = []
    for to, ty in zip(topics, types):
        results.append(to)

    #  print "GetTopicList result:"
    #  print results
    return results


def bag2csv(fname):
    folder_name = fname.split("/")[-1].split(".")[0]
    if not os.path.exists(folder_name):
        os.mkdir(folder_name)
    else:
        return folder_name
    try:
        bag = rosbag.Bag(fname)
        streamdict = dict()
        stime = None
        etime = None
    except Exception as e:
        rospy.logfatal('failed to load bag file: %s', e)
        exit(1)
    topic_names = GetTopicList(fname)

    try:
        for topic, msg, time in bag.read_messages(topics=topic_names,
                                                  start_time=stime,
                                                  end_time=etime):
            if topic in streamdict:
                stream = streamdict[topic]
            else:
                stream = open(format_csv_filename(folder_name, "%t.csv", fname[fname.rfind('/'):-4] + topic), 'w')
                streamdict[topic] = stream
                # header
                stream.write("time")
                message_type_to_csv(stream, msg)
                stream.write('\n')

            stream.write(str(datetime.fromtimestamp(time.to_time()).timestamp() * 1000))
            message_to_csv(stream, msg, flatten=False)
            stream.write('\n')
        [s.close for s in streamdict.values()]
    except Exception as e:
        rospy.logwarn("fail: %s", e)
    finally:
        bag.close()
    return folder_name


def nested_dict():
    return defaultdict(nested_dict)


def graph_bag_val_cmd(data_cmd, data_val, time_val, time_cmd, place, value):
    fig_cmd = list()
    fig_val = list()
    for i in range(len(data_cmd)):
        fig_cmd.append(data_cmd[i][place])
    for i in range(len(data_val)):
        fig_val.append(data_val[i][place])

    # time_val = time_sec(time_val)
    # time_cmd = time_sec(time_cmd)

    plt.figure(value)
    plt.style.use('seaborn')

    plt.xlabel('Time (sec)')
    plt.ylabel('Angle (deg)')
    plt.plot(time_cmd, fig_cmd, label='Command')
    plt.plot(time_val, fig_val, label='Actual Value')

    plt.tight_layout()
    plt.title(value)
    plt.legend()

    plt.show(block=False)


def convertDataStringToListData(data):
    if "data" in data.keys():
        data = data["data"]
    for i, (_, s) in enumerate(data.items()):
        try:
            data[i] = [float(x) for x in literal_eval(s)]
        except ValueError:
            print("Ignoring list is already float")
            break
        except TypeError:
            data[i] = float(s)
    return data


def tension_graph(data, place, value):

    tension = data["tension_val"]
    tension_data = []
    for val in tension[".data"]:
        tension_data.append(literal_eval(val))
    fig_tension1 = list()
    fig_tension2 = list()
    for i in range(len(tension_data)):
        fig_tension1.append(tension_data[i][place])
        fig_tension2.append(tension_data[i][place + 1])

    time_T = convertDataStringToListData(tension['time'])
    time_T = time_sec(time(time_T))

    plt.figure(value)
    plt.style.use('seaborn')
    plt.style.use('classic')
    plt.xlabel('Time (sec)')
    plt.ylabel('Tension (KG)')
    plt.plot(time_T, fig_tension1, label='string #1')
    plt.plot(time_T, fig_tension2, label='string #2')
    plt.title("Tension")

    plt.tight_layout()
    plt.title(value)
    plt.legend()

    plt.show(block=False)


def motor_graph(data, place, value):

    motor = data["motor_cmd"]
    motor_data = []
    for val in motor[".data"]:
        motor_data.append(literal_eval(val))
    fig_motor1 = list()
    fig_motor2 = list()
    for i in range(len(motor_data)):
        fig_motor1.append(motor_data[i][place])
        fig_motor2.append(motor_data[i][place + 1])

    time_M = convertDataStringToListData(motor['time'])
    time_M = time_sec(time(time_M))

    plt.figure(value)
    plt.style.use('seaborn')
    plt.style.use('classic')
    plt.xlabel('Time (sec)')
    plt.ylabel('Motor command (PWM)')
    plt.plot(time_M, fig_motor1, label='motor #1')
    plt.plot(time_M, fig_motor2, label='motor #2')
    plt.title("Motor")

    plt.tight_layout()
    plt.title(value)
    plt.legend()

    plt.show(block=False)
